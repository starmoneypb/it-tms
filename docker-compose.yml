services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: it_tms
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  db-setup:
    image: golang:1.23-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: it_tms
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: it_tms
      DB_USER: postgres
      DB_PASSWORD: postgres
      DATABASE_URL: postgres://postgres:postgres@db:5432/it_tms?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/workspace
    working_dir: /workspace
    command: >
      sh -c "
        apk add --no-cache postgresql-client;
        echo 'Waiting for database to be ready...';
        until pg_isready -h db -p 5432 -U postgres -d it_tms; do
          echo 'Database is unavailable - sleeping';
          sleep 2;
        done;
        echo 'Database is ready!';
        export PGPASSWORD=postgres;
        echo 'Applying database migrations...';
        echo 'Applying 0001_init.up.sql...';
        psql -h db -p 5432 -U postgres -d it_tms -f db/migrations/0001_init.up.sql;
        echo 'Applying 0002_indexes.up.sql...';
        psql -h db -p 5432 -U postgres -d it_tms -f db/migrations/0002_indexes.up.sql;
        echo 'Migrations applied successfully!';
        echo 'Seeding database...';
        cd apps/api;
        go mod download;
        go mod tidy;
        go run cmd/seed/main.go;
        echo 'Database setup complete!';
      "

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    restart: always
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/it_tms?sslmode=disable
      PORT: 8080
      JWT_SECRET: your-secret-key-here
      CORS_ALLOWED_ORIGINS: http://localhost:3000
    ports:
      - "8080:8080"
    depends_on:
      - db-setup
    volumes:
      - ./apps/api/uploads:/app/uploads

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      - api

volumes:
  pgdata: {}