name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: "1.23"
  NODE_VERSION: "20"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      
      - name: Run npm audit
        run: pnpm audit --audit-level moderate
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Go mod download
        working-directory: apps/api
        run: go mod download
      
      - name: Go mod verify
        working-directory: apps/api
        run: go mod verify

  build-test:
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: it_tms
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install root deps
        run: pnpm i --frozen-lockfile

      - name: Install migrate CLI
        run: |
          go install github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Run migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/it_tms?sslmode=disable
        run: |
          migrate -database "$DATABASE_URL" -path db/migrations up

      - name: TypeScript type check
        run: pnpm typecheck

      - name: Lint code
        run: pnpm lint

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/it_tms?sslmode=disable
          JWT_SECRET: "ci_secret_key"
          CORS_ALLOWED_ORIGINS: "http://localhost:3000"
        run: |
          pnpm test --coverage

      - name: Go tests with coverage
        working-directory: apps/api
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/it_tms?sslmode=disable
          JWT_SECRET: "ci_secret_key"
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Build applications
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/it_tms?sslmode=disable
          JWT_SECRET: "ci_secret_key"
          CORS_ALLOWED_ORIGINS: "http://localhost:3000"
        run: |
          pnpm build
          cd apps/api && go build -o server ./cmd/server

      - name: Migrations dry run (down 1)
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/it_tms?sslmode=disable
        run: |
          migrate -database "$DATABASE_URL" -path db/migrations down 1
          migrate -database "$DATABASE_URL" -path db/migrations up

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/web/coverage/
            apps/api/coverage.html