# Production-like environment for local testing
# Usage: docker-compose -f docker-compose.prod-like.yml up --build

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_postgres_password}
      POSTGRES_DB: ${POSTGRES_DB:-it_tms}
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    # Only expose for localhost testing
    ports:
      - "127.0.0.1:5432:5432"

  # Database migration service
  db-migrate:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_postgres_password}
      POSTGRES_DB: ${POSTGRES_DB:-it_tms}
      PGPASSWORD: ${POSTGRES_PASSWORD:-secure_postgres_password}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./db/migrations:/migrations:ro
    networks:
      - app-network
    command: >
      sh -c "
        echo 'Applying database migrations...';
        for migration in /migrations/*.up.sql; do
          echo \"Applying $$(basename $$migration)...\";
          psql -h db -p 5432 -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-it_tms} -f $$migration || exit 1;
        done;
        echo 'All migrations applied successfully!';
      "
    restart: "no"

  # Database seeding service
  db-seed:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: builder
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_postgres_password}@db:5432/${POSTGRES_DB:-it_tms}?sslmode=disable
    depends_on:
      db-migrate:
        condition: service_completed_successfully
    volumes:
      - ./apps/api:/workspace:ro
    working_dir: /workspace
    networks:
      - app-network
    command: >
      sh -c "
        echo 'Seeding database...';
        go run cmd/seed/main.go;
        echo 'Database seeding complete!';
      "
    restart: "no"

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_postgres_password}@db:5432/${POSTGRES_DB:-it_tms}?sslmode=disable
      PORT: 8080
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here_make_it_long_and_random_for_production}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:8000}
      GO_ENV: production
      UPLOAD_DIR: /app/uploads
      SECURE_COOKIES: "false"  # Set to true for HTTPS
      WEB_APP_URL: http://localhost
    depends_on:
      db-seed:
        condition: service_completed_successfully
    volumes:
      - api_uploads:/app/uploads
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_TELEMETRY_DISABLED: 1
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx reverse proxy for production-like setup
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "8000:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - api
      - web
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  pgdata_prod:
    driver: local
  api_uploads:
    driver: local
